Exercise 1.1 Consider the lecture’s LongCounter example found in file TestLongCounterExperiments.java, and
remove the synchronized keyword from method increment so you get this class:
class LongCounter {
private long count = 0;
public void increment() {
count = count + 1;
}
public synchronized long get() {
return count;
}
}
1. The main method creates a LongCounter object. Then it creates and starts two threads that run concurrently,
and each increments the count field 10 million times by calling method increment.
What kind of final values do you get when the increment method is not synchronized?
2. Reduce the counts value from 10 million to 100, recompile, and rerun the code. It is now likely that
you get the correct result (200) in every run. Explain how this could be. Would you consider this software
correct, in the sense that you would guarantee that it always gives 200?
3. The increment method in LongCounter uses the assignment
count = count + 1;
to add one to count. This could be expressed also as count += 1 or as count++.
Do you think it would make any difference to use one of these forms instead? Why? Change the code and
run it, do you see any difference in the results for any of these alternatives?
4. Extend the LongCounter class with a decrement() method which subtracts 1 from the count field.
Change the code in main so that t1 calls decrement 10 million times, and t2 calls increment 10
million times, on a LongCounter instance. In particular, initialize main’s counts variable to 10 million
as before.
What should the final value be, after both threads have completed?
Note that decrement is called only from one thread, and increment is called only from another thread.
So do the methods have to be synchronized for the example to produce the expected final value? Explain
why (or why not).
5. Make four experiments: (i) Run the example without synchronized on any of the methods; (ii) with
only decrement being synchronized; (iii) with only increment being synchronized; and (iv) with both
being synchronized. List some of the final values you get in each case. Explain how they could arise.